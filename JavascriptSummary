0. 什么是前端
广义上和用户产生交互的Interface。（移动端、PC、Web等--大前端概念，ref: http://www.infoq.com/cn/articles/talking-about-daqianduan）
狭义：传统的Web浏览器交互界面（HTML+CSS+JS）
1. Web前端入门
  1.1 HTML的定义与作用（DOM结构）
通过 HTML DOM，树中的所有节点均可通过 JavaScript 进行访问。所有 HTML 元素（节点）均可被修改，也可以创建或删除节点。
JS操作DOM的方法（Ref：http://www.w3school.com.cn/htmldom/dom_methods.asp）
HTML与HTML5:
HTML5是HTML最新的修订版本，2014年10月由万维网联盟（W3C）完成标准制定。
用于绘画的 canvas 元素
用于媒介回放的 video 和 audio 元素
对本地离线存储的更好的支持
新的特殊内容元素，比如 article、footer、header、nav、section
新的表单控件，比如 calendar、date、time、email、url、search

http://www.runoob.com/html/html-tutorial.html
Grag: http://www.runoob.com/try/try.php?filename=tryhtml5_draganddrop

  1.2 CSS与CSS3
CSS：层叠样式表(英文全称：Cascading Style Sheets)是一种用来表现HTML（标准通用标记语言的一个应用）或XML（标准通用标记语言的一个子集）等文件样式的计算机语言。CSS不仅可以静态地修饰网页，还可以配合各种脚本语言动态地对网页各元素进行格式化。

CSS盒模型本质上是一个盒子，封装周围的HTML元素，它包括：边距，边框，填充，和实际内容。
盒模型允许我们在其它元素和周围元素边框之间的空间放置元素。

CSS3: http://www.runoob.com/css3/css3-transitions.html

CSS Demo:
https://jsbin.com/jifico

  1.3 JS
    1.3.1 js是弱类型语言，什么是弱类型语言。和强类型语言的区别

弱类型语言是指数据类型可以被忽略的语言，与强类型定义语言相反，一个变量可以赋不同的数据类型的值。--速度较快
强类型语言是指变量类型一旦被指明了数据类型，如果不经过强制转换，该变量永远就是这种数据类型。-安全性与严谨性

    1.3.2 是否是面向对象？（Ref:https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript）
JavaScript 的核心是支持面向对象的，同时它也提供了强大灵活的 OOP 语言能力。
什么是面向对象：
一切事物皆对象
对象具有封装和继承特性
对象与对象之间使用消息通信，各自存在信息隐藏
并不依赖某种语言存在。类实现了面向对象（java，cpp），js通过原型实现了面向对象。
    1.3.3 JS面向对象的实现
                                在基于类的面向对象方式中，对象（object）依靠类（class）来产生。
                        在基于原型的面向对象方式中，对象（object）则是依靠 构造器（constructor）利用 原型（prototype）构造出来的。
对象（函数对象）
            Array、Object等都会通过new操作符返回一个普通对象。尽管函数本身也是一个对象，但它与普通的对象还是有区别的，因为它同时也是对象构造器，也就是说，可以new一个函数来返回一个对象。所有typeof返回“function”的对象都是函数对象。也称这样的对象为构造器（constructor），因而，所有的构造器都是对象，但不是所有的对象都是构造器。
  *函数对象
    函数对象其本身即是对象，又可以作为对象构造器生成对象。（或者说，函数，即是构造器constructor)
如，     
var o = new Object();
alert(typeof(o));
alert(o.constructor);

var a= new Array()
print a.constructor
ƒ Array() { [native code] }

print typeof(a.constructor)
"function"

print typeof(a)
"object"

print a
[]
length:0
__proto__:Array(0)
        concat:ƒ concat()
        constructor:ƒ Array()
        copyWithin:ƒ copyWithin()
        entries:ƒ entries()
        every:ƒ every()
        fill:ƒ fill()
        filter:ƒ filter()
        find:ƒ find()
        findIndex:ƒ findIndex()
        forEach:ƒ forEach()
        includes:ƒ includes()
        indexOf:ƒ indexOf()
        join:ƒ join()
        keys:ƒ keys()
        lastIndexOf:ƒ lastIndexOf()
        length:0
        map:ƒ map()
        pop:ƒ pop()
        push:ƒ push()
        reduce:ƒ reduce()
        reduceRight:ƒ reduceRight()
        reverse:ƒ reverse()
        shift:ƒ shift()
        slice:ƒ slice()
        some:ƒ some()
        sort:ƒ sort()
        splice:ƒ splice()
        toLocaleString:ƒ toLocaleString()
        toString:ƒ toString()
        unshift:ƒ unshift()
        values:ƒ values()
        Symbol(Symbol.iterator):ƒ values()
        Symbol(Symbol.unscopables):{copyWithin: true, entries: true, fill: true, find: true, findIndex: true, …}
        __proto__:Object
这说明，a是通过Array()函数构造出来的对象。Array本身是是一个函数对象
此外，无论是js内部的函数对象还是开发人员自己写的函数对象。都是属于函数对象。
开发人员自己编写的，一般如下几类：
function foo1() {}
var foo2 = function(){} //匿名函数对象
var foo3 = function foo4(){}
var foo5 = new Function(); //这玩意儿怎么用？需要研究下
原型链
对于非函数对象来说，其继承链通过__proto__链起来。
var a = {
    a1 : 1,
    a2 : 2
}
var b = {
    b1: 11,
    __proto__: a
}

print b
b1:11                               
__proto__:                               
        a1:1                       
        a2:2                       
        __proto__:               
                constructor:ƒ Object()
                hasOwnProperty:ƒ hasOwnProperty()       
                isPrototypeOf:ƒ isPrototypeOf()       
                propertyIsEnumerable:ƒ propertyIsEnumerable()               
                toLocaleString:ƒ toLocaleString()               
                toString:ƒ toString()       
                valueOf:ƒ valueOf()       
                __defineGetter__:ƒ __defineGetter__()       
                __defineSetter__:ƒ __defineSetter__()               
                __lookupGetter__:ƒ __lookupGetter__()               
                __lookupSetter__:ƒ __lookupSetter__()                       
                get __proto__:ƒ __proto__()

但是更为常用的是通过函数对象生成对象，实现继承，此时，函数对象通过修改prototype实现修改其constructor。
var c = function() {
  this.c1 = 1；
  this.c2 = 2;
}

c.prototype = {
  e1: 1;
  say: function(){
    console.log("e hello world");
  }
}

g = new c()

print g
c1:1
c2:2
        __proto__:
        e1:1
        say:ƒ ()
        __proto__:
                constructor:ƒ Object()
                hasOwnProperty:ƒ hasOwnProperty()
                isPrototypeOf:ƒ isPrototypeOf()
                propertyIsEnumerable:ƒ propertyIsEnumerable()
                toLocaleString:ƒ toLocaleString()
                toString:ƒ toString()
                valueOf:ƒ valueOf()
                __defineGetter__:ƒ __defineGetter__()
                __defineSetter__:ƒ __defineSetter__()
                __lookupGetter__:ƒ __lookupGetter__()
                __lookupSetter__:ƒ __lookupSetter__()
                get __proto__:ƒ __proto__()
                set __proto__:ƒ __proto__()


2. 开发框架
  2.1 MVC
    MVC是一种理念，不是具体的编码。基本概念如下：
    模型（Model） 用于封装与应用程序的业务逻辑相关的数据以及对数据的处理方法。“ Model ”有对数据直接访问的权力，例如对数据库的访问。“Model”不依赖“View”和“Controller”，也就是说， Model 不关心它会被如何显示或是如何被操作。但是 Model 中数据的变化一般会通过一种刷新机制被公布。为了实现这种机制，那些用于监视此 Model 的 View 必须事先在此 Model 上注册，从而，View 可以了解在数据 Model 上发生的改变。（比如：观察者模式（软件设计模式））
    视图（View）能够实现数据有目的的显示（理论上，这不是必需的）。在 View 中一般没有程序上的逻辑。为了实现 View 上的刷新功能，View 需要访问它监视的数据模型（Model），因此应该事先在被它监视的数据那里注册。
    控制器（Controller）起到不同层面间的组织作用，用于控制应用程序的流程。它处理事件并作出响应。“事件”包括用户的行为和数据 Model 上的改变。

    angularjs的MVW https://www.zhihu.com/question/30414956
    对于一个框架，只要搞清楚一个核心主题就行了。angular 的核心主题是把模板转译成一个带有内部状态管理的 renderer，react 的核心主题是把 jsx 转译成一个也带有内部状态，但是管理功能比较弱的 renderer。这样做的价值在于模板也好，jsx 也好，都是声明语法，从开发成本的角度，声明编码是优于逻辑编码的。至于 model 放在哪里，是 mvvm 还是 mvc，其实是实现细节。angular 状态管理的功能比较强，所以能容纳一些业务逻辑的数据流，react 状态管理比较弱，所以更适合做贫血组件，把数据流单独拿出来放到各种 flux 里去。区别就这点，其实不是什么本质区别。前端框架和后端框架最大的区别在于事件流，后端的事件因为是 http 请求，所以往往通过一个非常明显的 controller 入口统一处理，但是前端的事件来自于 gui 操作，所以 controller 就被打散了，根据 controller 组织方式的不同，衍生出来各种 mv*，其实说到底，都是一个东西。

  2.2 Javascript&&Jquery
  What's jQuery?
  jQuery is a fast, small, and feature-rich JavaScript library. It makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers. With a combination of versatility and extensibility, jQuery has changed the way that millions of people write JavaScript.
  
  Javascript是基础，Jquery基于Javascript实现库，进行封装提供方法。
  优劣：Javascript强在性能高，处理速度快，但兼容性和拓展能力较差；Jquery易用性、兼容性、可拓展程度高，开发效率高，但性能上低于Javascript。

  实现：
Javascript Version: https://jsbin.com/ruhayin/edit?js,output
jQueryVersion: https://jsbin.com/hiwetoj/edit?js,output
  2.4 各种JS框架及其优劣对比
    vuejs
    angularjs
    reactjs
3. JS的学习方法与地址
https://jquery.com/
http://www.w3school.com.cn/
4. 闭包
5. 工具链
6. 内核
